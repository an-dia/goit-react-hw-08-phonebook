{"version":3,"sources":["components/Alert/Alert.js","transitionsStyles/fadeAlertStyle.module.css","components/Alert/Alert.module.css","views/RegisterView.module.css","views/RegisterView.js"],"names":["Alert","this","props","errorContacts","setTimeout","clearErrorContacts","errorAuth","clearErrorAuth","CSSTransition","in","message","classNames","alertStyle","timeout","unmountOnExit","className","s","Container","Text","Component","connect","state","contactsSelectors","getError","authSelectors","dispatch","contactsAction","authActions","clearError","module","exports","RegisterView","name","email","password","handleChange","target","value","setState","handleSubmit","e","preventDefault","onRegister","isLoading","isError","time","onSubmit","form","autoComplete","label","type","onChange","variant","color","mapDispatchToProps","authOperations","register","getLoading"],"mappings":"ySAYMA,E,mLAUkB,IAAD,OACbC,KAAKC,MAAMC,cACTC,YAAW,WACP,EAAKF,MAAMG,uBACZ,KAGCJ,KAAKC,MAAMI,WACfF,YAAW,WACP,EAAKF,MAAMK,mBACZ,O,+BAMX,OACG,cAACC,EAAA,EAAD,CACGC,GAAIR,KAAKC,MAAMQ,QACfC,WAAYC,IACZC,QAAS,IACTC,eAAa,EAJhB,SAMG,qBAAKC,UAAWC,IAAEC,UAAlB,SACE,mBAAGF,UAAWC,IAAEE,KAAhB,SAAuBjB,KAAKC,MAAMQ,kB,GAlC1BS,aAmDLC,eAVS,SAACC,GAAD,MAAY,CAChClB,cAAemB,IAAkBC,SAASF,GAC1Cf,UAAWkB,IAAcD,SAASF,OAGX,SAAAI,GAAQ,MAAK,CACpCpB,mBAAoB,kBAAMoB,EAASC,QACnCnB,eAAgB,kBAAMkB,EAASE,IAAYC,kBAGhCR,CAA6CpB,I,oBC9D5D6B,EAAOC,QAAU,CAAC,MAAQ,8BAA8B,YAAc,oCAAoC,KAAO,6BAA6B,WAAa,qC,oBCA3JD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,sB,oBCA9DD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,MAAQ,8B,6JCOtDC,E,4MACJV,MAAQ,CACNW,KAAM,GACNC,MAAO,GACPC,SAAU,I,EAGZC,aAAe,YAAkC,IAAD,IAA9BC,OAAUJ,EAAoB,EAApBA,KAAMK,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBN,EAAOK,K,EAG1BE,aAAe,SAAAC,GACbA,EAAEC,iBAEF,EAAKvC,MAAMwC,WAAW,EAAKrB,OAE3B,EAAKiB,SAAS,CAAEN,KAAM,GAAIC,MAAO,GAAIC,SAAU,M,uDAGvC,IAAD,EAC2BjC,KAAKoB,MAA/BW,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,SAErB,OACE,gCACE,qJAECjC,KAAKC,MAAMyC,WAAa,cAAC,IAAD,IAEzB,cAAC,IAAD,CAAOjC,QAAST,KAAKC,MAAM0C,QAASC,KAAM,MAE1C,uBACEC,SAAU7C,KAAKsC,aACfxB,UAAWC,IAAE+B,KACbC,aAAa,MAHf,UAKE,wBAAOjC,UAAWC,IAAEiC,MAApB,+BAEE,uBACEC,KAAK,OACLlB,KAAK,OACLK,MAAOL,EACPmB,SAAUlD,KAAKkC,kBAInB,wBAAOpB,UAAWC,IAAEiC,MAApB,2CAEE,uBACEC,KAAK,QACLlB,KAAK,QACLK,MAAOJ,EACPkB,SAAUlD,KAAKkC,kBAInB,wBAAOpB,UAAWC,IAAEiC,MAApB,iDAEE,uBACEC,KAAK,WACLlB,KAAK,WACLK,MAAOH,EACPiB,SAAUlD,KAAKkC,kBAGlB,cAAC,IAAD,CAAQiB,QAAQ,YAAYC,MAAM,UAAUH,KAAK,SAAjD,gC,GAhEgB/B,aA6ErBmC,EAAqB,CACzBZ,WAAYa,IAAeC,UAQdpC,uBAdS,SAACC,GAAD,MAAY,CAClCuB,QAASpB,IAAcD,SAASF,GAChCsB,UAAWnB,IAAciC,WAAWpC,MAYEiC,EAAzBlC,CAA6CW","file":"static/js/register-view.f6f58d40.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { authSelectors, authActions } from '../../redux/auth';\nimport { contactsSelectors } from '../../redux/contacts';\nimport { CSSTransition } from 'react-transition-group';\nimport * as contactsAction from '../../redux/contacts';\nimport alertStyle from '../../transitionsStyles/fadeAlertStyle.module.css';\nimport PropTypes from 'prop-types';\nimport s from './Alert.module.css';\n\n\n\nclass Alert extends Component {\n    static propTypes = {\n        message: PropTypes.string,\n        errorPb: PropTypes.object,\n        errorAuth: PropTypes.string,\n        clearErrorPb: PropTypes.func,\n        clearErrorPAuth: PropTypes.func\n    };\n   \n   \n  componentDidUpdate() {\n      if (this.props.errorContacts) {\n            setTimeout(() => {\n                this.props.clearErrorContacts();\n            }, 3000);\n             return;\n        }\n            if (this.props.errorAuth) {\n            setTimeout(() => {\n                this.props.clearErrorAuth();\n            }, 3000);\n             return;\n        }\n    }\n  \n  render() {\n    return (\n       <CSSTransition\n          in={this.props.message}\n          classNames={alertStyle}\n          timeout={250}\n          unmountOnExit\n        >\n          <div className={s.Container}>\n            <p className={s.Text}>{this.props.message}</p>\n          </div>\n        </CSSTransition>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n    errorContacts: contactsSelectors.getError(state),\n    errorAuth: authSelectors.getError(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    clearErrorContacts: () => dispatch(contactsAction.clearError()),\n    clearErrorAuth: () => dispatch(authActions.clearError())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Alert);\n\n// const Alert = ({ text }) => {\n//   return (\n//     <div className={s.Container}>\n//       <p className={s.Text}>{text}</p>\n//     </div>\n//   );\n// };\n\n// Alert.propTypes = {\n//   text: PropTypes.string.isRequired,\n// };\n\n// export default Alert;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fadeAlertStyle_enter__3SL3s\",\"enterActive\":\"fadeAlertStyle_enterActive__sjzk1\",\"exit\":\"fadeAlertStyle_exit__3bW88\",\"exitActive\":\"fadeAlertStyle_exitActive__1P1lD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Alert_Container__TAaiq\",\"Text\":\"Alert_Text__3RRyN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"RegisterView_form__2HSMY\",\"label\":\"RegisterView_label__2t6sp\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { authOperations, authSelectors } from '../redux/auth';\nimport Button from '@material-ui/core/Button';\nimport Loader from '../components/Loader';\nimport Alert from '../components/Alert'\nimport s from './RegisterView.module.css';\n\nclass RegisterView extends Component {\n  state = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onRegister(this.state);\n\n    this.setState({ name: '', email: '', password: '' });\n  };\n\n  render() {\n    const { name, email, password } = this.state;\n\n    return (\n      <div>\n        <h1>Страница регистрации</h1>\n          \n        {this.props.isLoading && <Loader />}\n\n        <Alert message={this.props.isError} time={3000} />\n\n        <form\n          onSubmit={this.handleSubmit}\n          className={s.form}\n          autoComplete=\"off\"\n        >\n          <label className={s.label}>\n            Имя\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className={s.label}>\n            Почта\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className={s.label}>\n            Пароль\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={this.handleChange}\n            />\n          </label>\n           <Button variant=\"contained\" color=\"primary\" type=\"submit\">Register</Button>\n          {/* <button type=\"submit\">Зарегистрироваться</button> */}\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isError: authSelectors.getError(state),\n  isLoading: authSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = {\n  onRegister: authOperations.register,\n};\n\n// одно и тоже\n// const mapDispatchToProps = dispatch => ({\n//   onRegister: (data) => dispatch(authOperations.register(data)),\n// });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterView);\n"],"sourceRoot":""}